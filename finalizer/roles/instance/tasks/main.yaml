---

- block:
  - name: "[INSTANCE-TESTS] - Create Bundle Directory"
    delegate_to: localhost
    file:
      state: directory
      owner: 1000
      group: 1000
      mode: 0750
      path: "/data/bundle"

  - name: "[INSTANCE-TESTS] - Ensure Output File Exists"
    delegate_to: localhost
    copy:
      content: "instance_layer: []"
      dest: "/data/bundle/output.yaml"
      force: no
      group: 1000
      owner: 1000
      mode: 0750

- name: "[INSTANCE-TESTS] - Import OS Information from Vars"
  set_fact:
    OS_NAME: '{{ img.os.split(":")[0] | lower }}'
    OS_VERSION: '{{ img.os.split(":")[1] | lower }}'

- block:
  - name: "[INSTANCE-TESTS] - Get Host's OS Name - PASSWORD"
    changed_when: false
    shell: |
      sshpass -p {{ hostvars[groups['servers'][item | int]]['ansible_ssh_pass'] }} ssh -o StrictHostKeyChecking=no {{ hostvars[groups['servers'][item | int]]['ansible_user'] }}@{{ hostvars[groups['servers'][item | int]]['inventory_hostname'] }} "cat /etc/*release* | grep -E "^NAME" | cut -d '=' -f 2 | sed 's/\"//g' "
    args:
      executable: /bin/bash
    register: os_name_results
    with_sequence: start=0 end={{ groups.servers | length -1 }}

  - name: "[INSTANCE-TESTS] - Get Host's OS Version - PASSWORD"
    changed_when: false
    shell: |
      sshpass -p {{ hostvars[groups['servers'][item | int]]['ansible_ssh_pass'] }} ssh -o StrictHostKeyChecking=no {{ hostvars[groups['servers'][item | int]]['ansible_user'] }}@{{ hostvars[groups['servers'][item | int]]['inventory_hostname'] }} "cat /etc/*release* | grep -E "^VERSION=" | cut -d '=' -f 2 | sed 's/\"//g' | cut -d ' ' -f 1 "
    args:
      executable: /bin/bash
    register: os_version_results
    with_sequence: start=0 end={{ groups.servers | length -1 }}
  
  - name: SET FACT
    set_fact:
      OS_NAME_RESULTS: "{{ os_name_results }}"
      OS_VERSION_RESULTS: "{{ os_version_results }}"

  when: vars['ins']['image']['auth']['type'] == 'password'

- block:
  - name: "[INSTANCE-TESTS] - Get Host's OS Name - PEM"
    changed_when: false
    shell: |
      ssh -o StrictHostKeyChecking=no -i {{ vars['ins']['image']['auth']['pem.path'] }} {{ hostvars[groups['servers'][item | int]]['ansible_user'] }}@{{ hostvars[groups['servers'][item | int]]['inventory_hostname'] }} "cat /etc/*release* | grep -E "^NAME" | cut -d '=' -f 2 | sed 's/\"//g' "
    args:
      executable: /bin/bash
    register: os_name_results
    with_sequence: start=0 end={{ groups.servers | length -1 }}

  - name: "[INSTANCE-TESTS] - Get Host's OS Version - PEM"
    changed_when: false
    shell: |
      ssh -o StrictHostKeyChecking=no -i {{ vars['ins']['image']['auth']['pem.path'] }} {{ hostvars[groups['servers'][item | int]]['ansible_user'] }}@{{ hostvars[groups['servers'][item | int]]['inventory_hostname'] }} "cat /etc/*release* | grep -E "^VERSION=" | cut -d '=' -f 2 | sed 's/\"//g' | cut -d ' ' -f 1 "
    args:
      executable: /bin/bash
    register: os_version_results
    with_sequence: start=0 end={{ groups.servers | length -1 }}

  - name: SET FACT
    set_fact:
      OS_NAME_RESULTS: "{{ os_name_results }}"
      OS_VERSION_RESULTS: "{{ os_version_results }}"

  when: vars['ins']['image']['auth']['type'] == 'pem'

- block:

  - name: "[INSTANCE-TESTS] - Write host's IP address to outputs"
    delegate_to: localhost
    changed_when: false
    shell: "yq -i '.instance_layer[{{ item | int }}].ip = \"{{ hostvars[groups['servers'][item | int]]['inventory_hostname'] }}\"' /data/bundle/output.yaml -y"
    with_sequence: start=0 end={{ groups.servers | length -1 }}

  - name: "[INSTANCE-TESTS] - Write host's OS Name to outputs"
    delegate_to: localhost
    changed_when: false
    shell: "yq -i '.instance_layer[{{ index }}].os.name.value = \"{{ item.stdout | lower }}\"' /data/bundle/output.yaml -y"
    loop: "{{OS_NAME_RESULTS.results}}"
    loop_control:
      index_var: index

  - name: "[INSTANCE-TESTS] - Write Host's OS Version to outputs"
    delegate_to: localhost
    changed_when: false
    shell: "yq -i '.instance_layer[{{ index }}].os.version.value = \"{{ item.stdout | lower }}\"' /data/bundle/output.yaml -y"
    loop: "{{OS_VERSION_RESULTS.results}}"
    loop_control:
      index_var: index

  - name: "[INSTANCE-TESTS] - Write Host's OS Name Checks with Imported OS_NAME Variable to outputs"
    delegate_to: localhost
    changed_when: false
    shell: "yq -i '.instance_layer[{{ index }}].os.name.match = \"{{ item.stdout | lower == OS_NAME }}\"' /data/bundle/output.yaml -y"
    loop: "{{OS_NAME_RESULTS.results}}"
    loop_control:
      index_var: index

  - name: "[INSTANCE-TESTS] - Write Host's OS Version Checks with Imported OS_VERSION Variable to outputs"
    delegate_to: localhost
    changed_when: false
    shell: "yq -i '.instance_layer[{{ index }}].os.version.match = \"{{ item.stdout | lower == OS_VERSION }}\"' /data/bundle/output.yaml -y"
    loop: "{{OS_VERSION_RESULTS.results}}"
    loop_control:
      index_var: index
