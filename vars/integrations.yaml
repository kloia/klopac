int: #integration layer variables
  required: [enabled,endpoint.uri,kubeconfig.path] 
  enabled: true 
  ingress:
    required: [enabled, name, namespace, type, operation.type, runner.type]
    enabled: true
    name: nginx
    namespace: ingress-nginx
    type: daemonset #daemonset or deploy
    operation:
      type: install #none, install, update or delete
      update:
        policy: apply #apply or recreate
    runner:
      type: executor 
  cpi:
    required: [enabled, name, namespace, operation.type, runner.type]
    enabled: false
    name: vsphere
    namespace: kube-system
    operation:
      type: install #none, install, update or delete
      update:
        policy: apply #apply or recreate
    runner:
      type: executor
  csi:
    required: [enabled, name, namespace, storageClass.name, operation.type, runner.type]
    enabled: false
    name: vsphere
    namespace: kube-system
    storageClass:
      name: vsphere-sc
      default: true
    dependsOn: cpi
    operation:
      type: install #none, install, update or delete
      update:
        policy: apply #apply or recreate
    runner:
      type: executor
  vault:
    required: [enabled, name, namespace, operation.type, runner.type]
    enabled: true
    name: hashicorp
    namespace: vault
    uri: '' #vault api uri
    rootKeys: [''] #generated root keys
    operation:
      type: install #none, install, update or delete
      update:
        policy: apply #apply or recreate
    runner:
      type: executor
    inputs:
      name: int.vault.name
      namespace: int.vault.namespace
    outputs:
      uri: int.vault.uri
      root-keys: int.vault.rootKeys
  certManager:
    required: [enabled, name, namespace, operation.type, runner.type]
    enabled: false
    name: cert-manager
    namespace: cert-manager
    operation:
      type: install #none, install, update or delete
      update:
        policy: apply #apply or recreate
    runner:
      type: executor
  clusterAutoscaler:
    required: [enabled, name, provider, namespace, master.min, master.max, master.group, worker.min, worker.max, worker.group, operation.type, runner.type]
    enabled: false
    name: clusterAutoscaler
    provider: platform.provider #for provider based cluster autoscaler settings
    namespace: kube-system
    logLevel: platform.log.level
    master:
      min: ins.master.count
      max: ins.master.count * 1.5
      group: ins.master.group
    worker:
      min: ins.worker.count
      max: ins.worker.count * 1.5
      group: ins.worker.group
    operation:
      type: install #none, install, update or delete
      update:
        policy: apply #apply or recreate
    runner:
      type: executor
  monitoring:
    required: [enabled, name, namespace, serviceType, operation.type, runner.type]
    enabled: true
    name: pgaStack
    namespace: monitoring
    serviceType: NodePort #NodePort, ClusterIP or Load Balancer
    uri: '' #management ui uri
    user: '' #management user
    password: '' #management user password
    operation:
      type: install #none, install, update or delete
      update:
        policy: apply #apply or recreate
    runner:
      type: executor
    outputs:
      uri: int.monitoring.uri
      user: int.monitoring.user
      password: int.monitoring.password
  logging:
    required: [enabled, name, namespace, operation.type, runner.type]
    enabled: true
    name: efk
    namespace: logging
    uri: '' #management ui uri
    user: '' #management ui user
    password: '' #management ui password
    operation:
      type: install #none, install, update or delete
      update:
        policy: apply #apply or recreate
    runner:
      type: executor
    outputs:
      uri: int.logging.uri
      user: int.logging.user
      password: int.logging.password
  inputs:
    endpoint:
      uri: engine.endpoint.uri
    kubeconfig:
      path: engine.kubeconfig.path