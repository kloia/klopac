---
# TODO: Extract clone and copy tasks as subtasks
- name: Create repo names list
  set_fact:
    repo_names: "{{ repo_names | default([]) + [vars['platform']['repo'][item]['uri'] | split('/') | last | split('.') | first ] }}"
  with_items: 
    - "{{ vars['platform']['repo'].keys() | list }}"
- name: Make sure the mandatory uri value is defined
  fail:
    msg: "Repository URI is a mandatory value to execute the playbook."
  when: vars['platform']['repo'][item]['uri'] == ""
  loop: "{{ vars['platform']['repo'].keys() | list }}"
  loop_control: 
    index_var: index
- name: Set owner and group for repo directories
  become: true
  ansible.builtin.file:
    path: "/data/repo/{{ repo_names[index] }}"
    owner: 1000
    group: 1000
    recurse: yes
  loop: "{{ vars['platform']['repo'].keys() | list }}"
  loop_control: 
    index_var: index
- name: Clone repos with type "repo"
  ansible.builtin.git:
    repo: "{{ vars['platform']['repo'][item]['uri'] }}"
    dest: "/data/repo/{{ repo_names[index] }}"
    version: "{{ vars['platform']['repo'][item]['branch'] }}"
  loop: "{{ vars['platform']['repo'].keys() | list }}"
  loop_control: 
    index_var: index
  when: vars['platform']['repo'][item]['branch'] | default("") | length > 0
- name: Clone repos with type "repo"
  ansible.builtin.git:
    repo: "{{ vars['platform']['repo'][item]['uri'] }}"
    dest: "/data/repo/{{ repo_names[index] }}"
    version: "{{ vars['platform']['repo'][item]['tag'] }}"
  loop: "{{ vars['platform']['repo'].keys() | list }}"
  loop_control: 
    index_var: index
  when: 
    - vars['platform']['repo'][item]['tag'] | default("") | length > 0
    - vars['platform']['repo'][item]['branch'] | default("") | length == 0
- name: Check if repo manifest is in Instance layer
  set_fact:
    operations: "{{ operations | default({}) | combine({ item: ins['operation']['type'] }) }}"
  loop: "{{ vars['platform']['repo'].keys() | list }}"
  when: ins[item] | default("") | length > 0
- name: Check if repo manifest is in Image layer
  set_fact:
    operations: "{{ operations | default({}) | combine({ item: img['operation']['type'] }) }}"
  loop: "{{ vars['platform']['repo'].keys() | list }}"
  when: img[item] | default("") | length > 0
- name: Check if repo manifest is in Engine layer
  set_fact:
    operations: "{{ operations | default({}) | combine({ item: engine['operation']['type'] }) }}"
  loop: "{{ vars['platform']['repo'].keys() | list }}"
  when: engine[item] | default("") | length > 0
- name: Copy states with type "repo"
  copy:
    src: "/data/bundle/{{ vars['platform']['repo'][item]['state']['file']['path'] }}"
    dest: "/data/repo/{{ repo_names[index] }}/"
    mode: u+rw,g-wx,o-rwx
  loop: "{{ vars['platform']['repo'].keys() | list }}"
  loop_control: 
    index_var: index
  when: 
  - vars['platform']['repo'][item]['state']['enabled'] == true
  - vars['platform']['repo'][item]['state']['file']['path'] | default("") | length > 0
  - operations[item] != 'create'