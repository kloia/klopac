// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/shell/Shell.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShell is a mock of Shell interface.
type MockShell struct {
	ctrl     *gomock.Controller
	recorder *MockShellMockRecorder
}

// MockShellMockRecorder is the mock recorder for MockShell.
type MockShellMockRecorder struct {
	mock *MockShell
}

// NewMockShell creates a new mock instance.
func NewMockShell(ctrl *gomock.Controller) *MockShell {
	mock := &MockShell{ctrl: ctrl}
	mock.recorder = &MockShellMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShell) EXPECT() *MockShellMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockShell) Run(command string) (error, string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", command)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run.
func (mr *MockShellMockRecorder) Run(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockShell)(nil).Run), command)
}
